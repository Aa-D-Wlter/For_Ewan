diff --git a/Pipeto/src/commands/check_reactor_status.c b/Pipeto/src/commands/check_reactor_status.c
index ccb1843..95e26ed 100644
--- a/Pipeto/src/commands/check_reactor_status.c
+++ b/Pipeto/src/commands/check_reactor_status.c
@@ -10,26 +10,8 @@
 
 #include "pipeto.h"
 
-void encrypt_message(const char *input, char *output, int shift)
+static void display_message(void)
 {
-    for (int i = 0; input[i] != '\0'; i++) {
-        if (input[i] >= 'A' && input[i] <= 'Z') {
-            output[i] = ((input[i] - 'A' + shift) % 26) + 'A';
-            continue;
-        }
-        if (input[i] >= 'a' && input[i] <= 'z') {
-            output[i] = ((input[i] - 'a' + shift) % 26) + 'a';
-        } else {
-            output[i] = input[i];
-        }
-    }
-}
-
-void check_reactor_status(UNUSED bool *is_admin, UNUSED history_t *history)
-{
-    const char *message = "ReactorStatusOK";
-    char encrypted_message[50] = {0};
-
     print_message("Starting reactor status check...\n", 1);
     print_message("Checking core temperature...\n", 1);
     print_message("Core temperature: Normal\n", 1);
@@ -37,10 +19,20 @@ void check_reactor_status(UNUSED bool *is_admin, UNUSED history_t *history)
     print_message("Coolant flow rate: Stable\n", 1);
     print_message("Checking radiation levels...\n", 2);
     printf("Radiation levels: Safe\n\n");
+}
+
+void check_reactor_status(UNUSED bool *is_admin, UNUSED history_t *history)
+{
+    char message[17] = {0};
+    int result_crypted = 0;
+
+    crypt_password(message, 16, 'R', 'e', 'a', 'c', 't', 'o', 'r',
+    'S', 't', 'a', 't', 'u', 's', 'O', 'K', '\0');
+    display_message();
     printf("Encrypting critical reactor data...\n");
-    encrypt_message(message, encrypted_message, 3);
+    result_crypted = hashed_password(message);
     sleep(1);
-    printf("Encrypted message: %s\n\n", encrypted_message);
+    printf("Encrypted message: %d\n\n", result_crypted);
     printf("Reactor status: OK\n");
     printf("Reactor status check complete.\n\n");
 }
